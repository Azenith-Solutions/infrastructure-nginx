name: deploy-edge

on:
  push:
    branches: [ "main" ]          
  workflow_dispatch: {}           

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write             
    env:
      IMAGE: ghcr.io/azenith-solutions/nginx
      TAG: ${{ github.sha }}      

    steps:

      - name: Checkout
        uses: actions/checkout@v4

      - name: Login GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.TOKEN_GIT }}

      - name: Build & Push Image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ env.IMAGE }}:${{ env.TAG }}

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H "${{ secrets.SERVER_IP }}" >> ~/.ssh/known_hosts

      - name: Copy configuration files
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "docker-compose.yml,nginx.conf,conf.d"
          target: "/opt/nginx/"

      - name: Deploy Container
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SERVER_IP }}      
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }} 
          script: |
            set -euo pipefail

            mkdir -p /opt/nginx/logs
            cd /opt/nginx
            echo IMAGE_TAG=${{ env.TAG }} > .env

            # Stop anterior se existir (evita conflitos de porta)
            docker compose down --remove-orphans || true

            echo "${{ secrets.TOKEN_GIT }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin

            docker compose pull
            docker compose up -d

            # Aguarda o container iniciar
            sleep 10
            
            # Verifica se container está rodando
            if docker compose ps --services --filter "status=running" | grep -q nginx; then
              echo "✅ Container nginx está rodando"
              docker exec hardwaretech-nginx-1 nginx -t
              echo "✅ Configuração do nginx válida"
            else
              echo "❌ Erro: Container não está rodando"
              docker compose logs
              exit 1
            fi
            
            # Limpa imagens antigas
            docker image prune -f