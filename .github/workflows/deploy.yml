name: deploy-edge

on:
  push:
    branches: [ "main" ]          
  workflow_dispatch: {}           

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write             # permite push para GHCR
    env:
      IMAGE: ghcr.io/azenith-solutions/nginx
      TAG: ${{ github.sha }}      

    steps:

      - name: Checkout
        uses: actions/checkout@v4

      - name: Login GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.TOKEN_GIT }}

      - name: Build & Push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ env.IMAGE }}:${{ env.TAG }}

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H "${{ secrets.SERVER_IP }}" >> ~/.ssh/known_hosts

      - name: Deploy over SSH
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SERVER_IP }}      
          username: ${{ secrets.SERVER_USER }}# usuário SSH
          key: ${{ secrets.SSH_PRIVATE_KEY }} 
          script: |
            set -euo pipefail

            # Diretórios padrão no servidor
            sudo mkdir -p /opt/nginx/{certs,logs}
            sudo chown -R $USER:$USER /opt/nginx

            # Grava a TAG do commit num .env consumido pelo docker-compose
            cd /opt/nginx
            echo IMAGE_TAG=${{ env.TAG }} > .env

            # Autentica no GHCR para poder "pull"
            echo "${{ secrets.TOKEN_GIT }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin

            # Puxa a imagem do commit e sobe/atualiza o container
            docker compose --env-file .env pull
            docker compose --env-file .env up -d

            # Valida configuração e aplica reload (sem derrubar)
            docker exec nginx nginx -t
            docker exec nginx nginx -s reload || true

            # Limpa imagens antigas
            docker image prune -f
